@file:JvmSynthetic
package com.batterystaple.kmeasure

import kotlin.jvm.JvmName
import kotlin.jvm.JvmSynthetic

@kotlin.internal.InlineOnly inline fun <D : CompositeDimension<*, *, *>> Int.ofUnit(unit: DimensionedQuantity<D>): DimensionedQuantity<D> =
    DimensionedQuantity(siValue = unit.siValue * this.toDouble())

@kotlin.internal.InlineOnly inline fun <D : CompositeDimension<*, *, *>> Long.ofUnit(unit: DimensionedQuantity<D>): DimensionedQuantity<D> =
    DimensionedQuantity(siValue = unit.siValue * this.toDouble())

@kotlin.internal.InlineOnly inline fun <D : CompositeDimension<*, *, *>> Double.ofUnit(unit: DimensionedQuantity<D>): DimensionedQuantity<D> =
    DimensionedQuantity(siValue = unit.siValue * this)

@kotlin.internal.InlineOnly inline fun <D : CompositeDimension<*, *, *>> DimensionedQuantity<D>.inUnit(unit: DimensionedQuantity<D>): Double =
    this.siValue / unit.siValue


@kotlin.internal.InlineOnly inline operator fun Scalar.plus(other: QuantityNumber): Scalar = Scalar(this.siValue + other)
@kotlin.internal.InlineOnly inline operator fun QuantityNumber.plus(other: Scalar): Scalar = Scalar(this + other.siValue)
@kotlin.internal.InlineOnly inline operator fun Scalar.minus(other: QuantityNumber): Scalar = Scalar(this.siValue - other)
@kotlin.internal.InlineOnly inline operator fun QuantityNumber.minus(other: Scalar): Scalar = Scalar(this - other.siValue)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        QuantityNumber.times(other: DimensionedQuantity<D>): DimensionedQuantity<D> =
    DimensionedQuantity(this * other.siValue)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        DimensionedQuantity<D>.times(other: QuantityNumber): DimensionedQuantity<D> =
    DimensionedQuantity(this.siValue * other)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        DimensionedQuantity<D>.div(other: QuantityNumber): DimensionedQuantity<D> =
    DimensionedQuantity(this.siValue / other)

@kotlin.internal.InlineOnly inline operator fun Scalar.plus(other: Int): Scalar = Scalar(this.siValue + other)
@kotlin.internal.InlineOnly inline operator fun Int.plus(other: Scalar): Scalar = Scalar(this + other.siValue)
@kotlin.internal.InlineOnly inline operator fun Scalar.minus(other: Int): Scalar = Scalar(this.siValue - other)
@kotlin.internal.InlineOnly inline operator fun Int.minus(other: Scalar): Scalar = Scalar(this - other.siValue)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        Int.times(other: DimensionedQuantity<D>): DimensionedQuantity<D> =
    DimensionedQuantity(this * other.siValue)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        DimensionedQuantity<D>.times(other: Int): DimensionedQuantity<D> =
    DimensionedQuantity(this.siValue * other)
@kotlin.internal.InlineOnly inline operator fun <D : CompositeDimension<*,*,*>>
        DimensionedQuantity<D>.div(other: Int): DimensionedQuantity<D> =
    DimensionedQuantity(this.siValue / other)

inline val Scalar.value get() = siValue

@Deprecated("siValue of a Scalar is deprecated", replaceWith=ReplaceWith("value"), DeprecationLevel.ERROR)
@kotlin.internal.HidesMembers
inline val Scalar.siValue get() = siValue

sealed interface BaseLengthDimension<L : BaseLengthDimension<L>>
object LengthN6 : BaseLengthDimension<LengthN6>
object LengthN5 : BaseLengthDimension<LengthN5>
object LengthN4 : BaseLengthDimension<LengthN4>
object LengthN3 : BaseLengthDimension<LengthN3>
object LengthN2 : BaseLengthDimension<LengthN2>
object LengthN1 : BaseLengthDimension<LengthN1>
object Length0 : BaseLengthDimension<Length0>
object Length1 : BaseLengthDimension<Length1>
object Length2 : BaseLengthDimension<Length2>
object Length3 : BaseLengthDimension<Length3>
object Length4 : BaseLengthDimension<Length4>
object Length5 : BaseLengthDimension<Length5>
object Length6 : BaseLengthDimension<Length6>

sealed interface BaseTimeDimension<T : BaseTimeDimension<T>>
object TimeN6 : BaseTimeDimension<TimeN6>
object TimeN5 : BaseTimeDimension<TimeN5>
object TimeN4 : BaseTimeDimension<TimeN4>
object TimeN3 : BaseTimeDimension<TimeN3>
object TimeN2 : BaseTimeDimension<TimeN2>
object TimeN1 : BaseTimeDimension<TimeN1>
object Time0 : BaseTimeDimension<Time0>
object Time1 : BaseTimeDimension<Time1>
object Time2 : BaseTimeDimension<Time2>
object Time3 : BaseTimeDimension<Time3>
object Time4 : BaseTimeDimension<Time4>
object Time5 : BaseTimeDimension<Time5>
object Time6 : BaseTimeDimension<Time6>

sealed interface BaseMassDimension<M : BaseMassDimension<M>>
object MassN2 : BaseMassDimension<MassN2>
object MassN1 : BaseMassDimension<MassN1>
object Mass0 : BaseMassDimension<Mass0>
object Mass1 : BaseMassDimension<Mass1>
object Mass2 : BaseMassDimension<Mass2>

typealias Dimension = CompositeDimension<*, *, *>
class CompositeDimension<M : BaseMassDimension<M>, L : BaseLengthDimension<L>, T : BaseTimeDimension<T>> private constructor()

typealias Scalar = DimensionedQuantity<ScalarDimension>
typealias Time = DimensionedQuantity<TimeDimension>
typealias Frequency = DimensionedQuantity<FrequencyDimension>
typealias Length = DimensionedQuantity<LengthDimension>
typealias Area = DimensionedQuantity<AreaDimension>
typealias Volume = DimensionedQuantity<VolumeDimension>
typealias Density = DimensionedQuantity<DensityDimension>
typealias Velocity = DimensionedQuantity<VelocityDimension>
typealias Acceleration = DimensionedQuantity<AccelerationDimension>
typealias Mass = DimensionedQuantity<MassDimension>
typealias Momentum = DimensionedQuantity<MomentumDimension>
typealias Force = DimensionedQuantity<ForceDimension>
typealias Pressure = DimensionedQuantity<PressureDimension>
typealias Energy = DimensionedQuantity<EnergyDimension>
typealias Power = DimensionedQuantity<PowerDimension>

typealias SquareTime = DimensionedQuantity<SquareTimeDimension>
typealias Absment = DimensionedQuantity<AbsmentDimension>
typealias AreaTime = DimensionedQuantity<AreaTimeDimension>
typealias MassTime = DimensionedQuantity<MassTimeDimension>
typealias MassLength = DimensionedQuantity<MassLengthDimension>
typealias Viscosity = DimensionedQuantity<ViscosityDimension>
typealias Action = DimensionedQuantity<ActionDimension>
typealias InverseTimeSquared = DimensionedQuantity<InverseTimeSquaredDimension>
typealias AreaPerTime = DimensionedQuantity<AreaPerTimeDimension>
typealias MassFlowRate = DimensionedQuantity<MassFlowRateDimension>
typealias SpecificEnergy = DimensionedQuantity<SpecificEnergyDimension>
typealias MassPerSquareTime = DimensionedQuantity<MassPerSquareTimeDimension>
typealias MassArea = DimensionedQuantity<MassAreaDimension>

typealias InverseLength = DimensionedQuantity<InverseLengthDimension>
typealias InverseArea = DimensionedQuantity<InverseAreaDimension>
typealias InverseVelocity = DimensionedQuantity<InverseVelocityDimension>
typealias InverseAcceleration = DimensionedQuantity<InverseAccelerationDimension>
typealias InverseMass = DimensionedQuantity<InverseMassDimension>
typealias InverseMomentum = DimensionedQuantity<InverseMomentumDimension>
typealias InverseForce = DimensionedQuantity<InverseForceDimension>
typealias InversePressure = DimensionedQuantity<InversePressureDimension>
typealias InverseEnergy = DimensionedQuantity<InverseEnergyDimension>
typealias TimeSquared = DimensionedQuantity<TimeSquaredDimension>
typealias TimePerArea = DimensionedQuantity<TimePerAreaDimension>
typealias InverseMassFlowRate = DimensionedQuantity<InverseMassFlowRateDimension>

typealias Distance = Length
typealias Impulse = Momentum
typealias Angle = Scalar
typealias AngularVelocity = Frequency
typealias AngularAcceleration = InverseTimeSquared
typealias AngularMomentum = Action
typealias Stress = Pressure

typealias ScalarDimension = CompositeDimension<Mass0, Length0, Time0>
typealias TimeDimension = CompositeDimension<Mass0, Length0, Time1>
typealias FrequencyDimension = CompositeDimension<Mass0, Length0, TimeN1>
typealias LengthDimension = CompositeDimension<Mass0, Length1, Time0>
typealias AreaDimension = CompositeDimension<Mass0, Length2, Time0>
typealias VolumeDimension = CompositeDimension<Mass0, Length3, Time0>
typealias DensityDimension = CompositeDimension<Mass1, Length3, Time0>
typealias VelocityDimension = CompositeDimension<Mass0, Length1, TimeN1>
typealias AccelerationDimension = CompositeDimension<Mass0, Length1, TimeN2>
typealias MassDimension = CompositeDimension<Mass1, Length0, Time0>
typealias MomentumDimension = CompositeDimension<Mass1, Length1, TimeN1>
typealias ForceDimension = CompositeDimension<Mass1, Length1, TimeN2>
typealias PressureDimension = CompositeDimension<Mass1, LengthN1, TimeN2>
typealias EnergyDimension = CompositeDimension<Mass1, Length2, TimeN2>
typealias PowerDimension = CompositeDimension<Mass1, Length2, TimeN3>

typealias SquareTimeDimension = CompositeDimension<Mass0, Length0, Time2>
typealias AbsmentDimension = CompositeDimension<Mass0, Length1, Time1>
typealias AreaTimeDimension = CompositeDimension<Mass0, Length2, Time1>
typealias MassTimeDimension = CompositeDimension<Mass1, Length0, Time1>
typealias MassLengthDimension = CompositeDimension<Mass1, Length1, Time0>
typealias ViscosityDimension = CompositeDimension<Mass1, LengthN1, TimeN1>
typealias ActionDimension = CompositeDimension<Mass1, Length2, TimeN1>
typealias InverseTimeSquaredDimension = CompositeDimension<Mass0, Length0, TimeN2>
typealias AreaPerTimeDimension = CompositeDimension<Mass0, Length2, TimeN2>
typealias MassFlowRateDimension = CompositeDimension<Mass1, Length0, TimeN1>
typealias SpecificEnergyDimension = CompositeDimension<Mass0, LengthN2, TimeN2>
typealias MassPerSquareTimeDimension = CompositeDimension<Mass1, Length0, TimeN2>
typealias MassAreaDimension = CompositeDimension<Mass1, Length2, Time0>

typealias InverseLengthDimension = CompositeDimension<Mass0, LengthN1, Time0>
typealias InverseAreaDimension = CompositeDimension<Mass0, LengthN2, Time0>
typealias InverseVelocityDimension = CompositeDimension<Mass0, LengthN1, Time1>
typealias InverseAccelerationDimension = CompositeDimension<Mass0, LengthN1, Time2>
typealias InverseMassDimension = CompositeDimension<MassN1, Length0, Time0>
typealias InverseMomentumDimension = CompositeDimension<MassN1, LengthN1, Time1>
typealias InverseForceDimension = CompositeDimension<MassN1, LengthN1, Time2>
typealias InversePressureDimension = CompositeDimension<MassN1, Length1, Time2>
typealias InverseEnergyDimension = CompositeDimension<MassN1, LengthN2, Time2>
typealias TimeSquaredDimension = CompositeDimension<Mass0, Length0, Time2>
typealias TimePerAreaDimension = CompositeDimension<Mass0, LengthN2, Time1>
typealias InverseMassFlowRateDimension = CompositeDimension<MassN1, Length0, Time1>

typealias DistanceDimension = LengthDimension
typealias ImpulseDimension = MomentumDimension
typealias AngleDimension = ScalarDimension
typealias AngularVelocityDimension = FrequencyDimension
typealias AngularAccelerationDimension = InverseTimeSquaredDimension
typealias AngularMomentumDimension = ActionDimension

@JvmName("m0l0t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Scalar): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Time): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Frequency): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Length): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Area): Area = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Volume): Volume = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Density): Density = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Velocity): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Acceleration): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Mass): Mass = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Momentum): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Force): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Pressure): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Energy): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: Power): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: TimeSquared): TimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: InverseTimeSquared): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: InverseLength): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: InverseArea): InverseArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Scalar): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Time): TimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Frequency): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Length): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Area): AreaTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Velocity): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Acceleration): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Mass): MassTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Momentum): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Force): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Pressure): Viscosity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Energy): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Time.times(other: Power): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Time.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Time.times(other: InverseTimeSquared): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Time.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: InverseLength): InverseVelocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: InverseArea): TimePerArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t1timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Time.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Scalar): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Time): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Frequency): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Length): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Velocity): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Mass): MassFlowRate = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Momentum): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Energy): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: TimeSquared): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): TimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-1timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Scalar): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Time): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Frequency): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Length): Area = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Area): Volume = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Acceleration): AreaPerTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Mass): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Momentum): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Force): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Pressure): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Length.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Length.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Length.times(other: InverseTimeSquared): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Length.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: InverseLength): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: InverseArea): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Length.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): InverseArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Scalar): Area = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Time): AreaTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Length): Volume = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Mass): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Pressure): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Area.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Area.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Area.times(other: InverseTimeSquared): AreaPerTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Area.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: InverseLength): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: InverseArea): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l2t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Area.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Scalar): Volume = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Length): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length6, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Density): Mass = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, Length3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Pressure): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: InverseLength): Area = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: InverseArea): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l3t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Volume.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Scalar): Density = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Time): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Length): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Area): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Volume): Mass = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN6, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, LengthN4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Density.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Density.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Density.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Density.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, LengthN5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-3t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Density.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN6, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Scalar): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Time): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Frequency): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Length): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Velocity): AreaPerTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Mass): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Momentum): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Force): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: TimeSquared): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: InverseLength): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-1timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Scalar): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Time): Velocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Length): AreaPerTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Mass): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Momentum): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: TimeSquared): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: InverseLength): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l1t-2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): SpecificEnergy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Scalar): Mass = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Time): MassTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Frequency): MassFlowRate = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Length): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Area): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, Length3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Velocity): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Acceleration): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, Length0, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: InverseTimeSquared): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l0t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Mass.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Density = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Scalar): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Time): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Frequency): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Length): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Area): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Velocity): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Acceleration): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: InverseLength): MassFlowRate = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: InverseArea): Viscosity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-1timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Scalar): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Time): Momentum = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Length): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Area): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Velocity): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Force.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: TimeSquared): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Force.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Force.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Force.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: InverseLength): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: InverseArea): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l1t-2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Force.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Scalar): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Time): Viscosity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Length): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Area): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Volume): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, LengthN2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l-1t-2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Scalar): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Time): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Frequency): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Length): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Area): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length4, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length4, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: TimeSquared): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: InverseLength): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: InverseArea): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Energy.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Scalar): Power = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Time): Energy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Length): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Area): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Density): DimensionedQuantity<CompositeDimension<Mass2, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass2, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Force): DimensionedQuantity<CompositeDimension<Mass2, Length3, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass2, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass2, Length4, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Power.times(other: Power): DimensionedQuantity<CompositeDimension<Mass2, Length4, TimeN6>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: TimeSquared): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun Power.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Power.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Power.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN6>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m1l2t-3timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Power.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Scalar): TimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Frequency): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Length): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Velocity): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Acceleration): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Force): MassLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Energy): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: Power): Action = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: InverseTimeSquared): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: InverseLength): InverseAcceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Frequency): TimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Length): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Acceleration): Absment = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length2, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: Power): MassArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time6>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: InverseTimeSquared): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t3timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Scalar): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Time): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Length): Acceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Area): AreaPerTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Mass): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: TimeSquared): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): Time = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: InverseArea): SpecificEnergy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-2timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Time): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Length): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Area): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Energy): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN6>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: TimeSquared): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN5>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN6>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t-3timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Scalar): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Time): InverseVelocity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Length): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Area): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Volume): Area = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Velocity): Frequency = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Acceleration): InverseTimeSquared = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Momentum): MassFlowRate = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Force): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Energy): Force = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: TimeSquared): InverseAcceleration = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: InverseLength): InverseArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-1t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Scalar): InverseArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Time): TimePerArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Length): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Area): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Volume): Length = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Mass): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Momentum): Viscosity = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Force): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Energy): MassPerSquareTime = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: InverseTimeSquared): SpecificEnergy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-2t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Time): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Length): InverseArea = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Area): InverseLength = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Volume): Scalar = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Density): DimensionedQuantity<CompositeDimension<Mass1, LengthN6, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Acceleration): SpecificEnergy = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Mass): Density = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Momentum): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Force): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Pressure): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Energy): Pressure = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: Power): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN2>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN3>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l-3t0timesm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.times(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN6, Time0>> = DimensionedQuantity(siValue * other.siValue)
@JvmName("m0l0t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Scalar): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Time): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Frequency): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Length): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Area): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Velocity): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Acceleration): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Mass): InverseMass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Momentum): InverseMomentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Force): InverseForce = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Pressure): InversePressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Energy): InverseEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: TimeSquared): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: InverseTimeSquared): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: InverseLength): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: InverseArea): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Scalar.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Scalar): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Time): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Frequency): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Length): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Area): TimePerArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Velocity): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Mass): InverseMassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Momentum): InverseForce = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Time.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: TimeSquared): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Time.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Time.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Time.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: InverseLength): Absment = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: InverseArea): AreaTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t1divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Time.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Scalar): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Time): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Frequency): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Velocity): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Acceleration): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length0, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Force): InverseMomentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: Power): InverseEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: InverseTimeSquared): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: InverseLength): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-1divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Frequency.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Scalar): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Time): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Frequency): Absment = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Length): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Area): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Volume): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Velocity): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Acceleration): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Momentum): InverseMassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Energy): InverseForce = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Length.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: TimeSquared): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Length.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Length.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Length.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: InverseLength): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: InverseArea): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Length.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Scalar): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Frequency): AreaTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Length): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Area): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Volume): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Velocity): Absment = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Force): InversePressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Area.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: TimeSquared): AreaPerTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Area.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Area.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Area.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: InverseLength): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l2t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Area.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Scalar): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Length): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Area): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Volume): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length6, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Velocity): AreaTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Energy): InversePressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, Length4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l3t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Volume.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length6, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Scalar): Density = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Time): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Frequency): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Length): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Area): DimensionedQuantity<CompositeDimension<Mass1, LengthN5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, LengthN6, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Density): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Mass): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Momentum): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Force): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Pressure): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Energy): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Density.div(other: Power): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Density.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Density.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Density.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-3t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Density.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Mass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Scalar): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Time): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Frequency): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Length): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length4, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Velocity): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Acceleration): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Momentum): InverseMass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Force): InverseMassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Energy): InverseMomentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: Power): InverseForce = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: InverseTimeSquared): Absment = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-1divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Velocity.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Scalar): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Frequency): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Length): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Volume): SpecificEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Velocity): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Acceleration): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, Length0, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Force): InverseMass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: Power): InverseMomentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: InverseTimeSquared): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): Absment = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: InverseLength): AreaPerTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l1t-2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Acceleration.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Scalar): Mass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Time): MassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Frequency): MassTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Length): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Area): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Volume): Density = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Density): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Mass): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Momentum): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Force): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Pressure): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Energy): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: Power): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: TimeSquared): MassPerSquareTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: InverseLength): MassLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: InverseArea): MassArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l0t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Mass.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, Length3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Scalar): Momentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Time): Force = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Frequency): MassLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Length): MassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Area): Viscosity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Density): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Velocity): Mass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Acceleration): MassTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Mass): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Momentum): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Force): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Pressure): AreaTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Energy): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: Power): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: InverseLength): Action = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-1divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Momentum.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Scalar): Force = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Time): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Frequency): Momentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Length): MassPerSquareTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Area): Pressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Density): DimensionedQuantity<CompositeDimension<Mass0, Length4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Velocity): MassFlowRate = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Acceleration): Mass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Mass): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Momentum): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Force): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Pressure): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Energy): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Force.div(other: Power): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Force.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Force.div(other: InverseTimeSquared): MassLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Force.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: InverseLength): Energy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l1t-2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Force.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Scalar): Pressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Time): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Frequency): Viscosity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Length): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Area): DimensionedQuantity<CompositeDimension<Mass1, LengthN3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, LengthN4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Density): AreaPerTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Mass): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Momentum): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Force): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Pressure): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Energy): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: Power): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: InverseLength): MassPerSquareTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: InverseArea): Force = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l-1t-2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Pressure.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Energy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Scalar): Energy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Time): Power = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Frequency): Action = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Length): Force = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Area): MassPerSquareTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Volume): Pressure = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Density): DimensionedQuantity<CompositeDimension<Mass0, Length5, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Velocity): Momentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Acceleration): MassLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Mass): AreaPerTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Momentum): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Force): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Pressure): Volume = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Energy): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: Power): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: InverseTimeSquared): MassArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Energy.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Scalar): Power = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t1") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Time): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Frequency): Energy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l1t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Length): DimensionedQuantity<CompositeDimension<Mass1, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l2t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Area): DimensionedQuantity<CompositeDimension<Mass1, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l3t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass1, LengthN1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Density): DimensionedQuantity<CompositeDimension<Mass0, Length5, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Velocity): Force = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Acceleration): Momentum = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l0t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Mass): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Momentum): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Force): Velocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Pressure): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Energy): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun Power.div(other: Power): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t3") @kotlin.internal.InlineOnly inline operator fun Power.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass1, Length2, TimeN6>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun Power.div(other: InverseTimeSquared): Action = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun Power.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): MassArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass1, Length3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass1, Length4, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m1l2t-3divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun Power.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass1, Length5, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Scalar): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Time): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Length): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: TimeSquared): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun TimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Time): TimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time6>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: TimeSquared): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, Time6>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, Length1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t3divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Scalar): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Frequency): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Area): SpecificEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Acceleration): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length0, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: InverseTimeSquared): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): Time = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: InverseLength): Acceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: InverseArea): AreaPerTime = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-2divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseTimeSquared.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN4>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Frequency): InverseTimeSquared = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, Length0, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN5>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN6>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: InverseTimeSquared): Frequency = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: InverseLength): DimensionedQuantity<CompositeDimension<Mass0, Length1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: InverseArea): DimensionedQuantity<CompositeDimension<Mass0, Length2, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l0t-3divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): DimensionedQuantity<CompositeDimension<Mass0, Length3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Scalar): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Frequency): InverseVelocity = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Length): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Velocity): TimePerArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, LengthN1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Force): InverseEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Pressure): DimensionedQuantity<CompositeDimension<MassN1, Length0, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: InverseTimeSquared): InverseAcceleration = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN1, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: InverseLength): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: InverseArea): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-1t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseLength.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Area = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Scalar): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Frequency): TimePerArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Density): DimensionedQuantity<CompositeDimension<MassN1, Length1, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, LengthN2, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Pressure): InverseForce = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN4, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: TimeSquared): SpecificEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN2, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: InverseLength): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: InverseArea): Scalar = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-2t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun InverseArea.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Length = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Scalar): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Time): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Frequency): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Length): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Area): DimensionedQuantity<CompositeDimension<Mass0, LengthN5, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Volume): DimensionedQuantity<CompositeDimension<Mass0, LengthN6, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Density): InverseMass = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Velocity): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Acceleration): DimensionedQuantity<CompositeDimension<Mass0, LengthN4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l0t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Mass): DimensionedQuantity<CompositeDimension<MassN1, LengthN3, Time0>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l1t-1") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Momentum): DimensionedQuantity<CompositeDimension<MassN1, LengthN4, Time1>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Force): DimensionedQuantity<CompositeDimension<MassN1, LengthN4, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l-1t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Pressure): InverseEnergy = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l2t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Energy): DimensionedQuantity<CompositeDimension<MassN1, LengthN5, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm1l2t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: Power): DimensionedQuantity<CompositeDimension<MassN1, LengthN5, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: TimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, Time3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, TimeN3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t-2") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: InverseTimeSquared): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time2>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l0t-3") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, Length0, TimeN3>>): DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time3>> = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l-1t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: InverseLength): InverseArea = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l-2t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: InverseArea): InverseLength = DimensionedQuantity(siValue / other.siValue)
@JvmName("m0l-3t0divm0l-3t0") @kotlin.internal.InlineOnly inline operator fun DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>.div(other: DimensionedQuantity<CompositeDimension<Mass0, LengthN3, Time0>>): Scalar = DimensionedQuantity(siValue / other.siValue)